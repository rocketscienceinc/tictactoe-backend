// Code generated by mockery v2.45.0. DO NOT EDIT.

package usecase

import (
	context "context"

	entity "github.com/rocketscienceinc/tictactoe-backend/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// MockgameRepoDep is an autogenerated mock type for the gameRepoDep type
type MockgameRepoDep struct {
	mock.Mock
}

type MockgameRepoDep_Expecter struct {
	mock *mock.Mock
}

func (_m *MockgameRepoDep) EXPECT() *MockgameRepoDep_Expecter {
	return &MockgameRepoDep_Expecter{mock: &_m.Mock}
}

// CreateOrUpdate provides a mock function with given fields: ctx, game
func (_m *MockgameRepoDep) CreateOrUpdate(ctx context.Context, game *entity.Game) error {
	ret := _m.Called(ctx, game)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Game) error); ok {
		r0 = rf(ctx, game)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockgameRepoDep_CreateOrUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdate'
type MockgameRepoDep_CreateOrUpdate_Call struct {
	*mock.Call
}

// CreateOrUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - game *entity.Game
func (_e *MockgameRepoDep_Expecter) CreateOrUpdate(ctx interface{}, game interface{}) *MockgameRepoDep_CreateOrUpdate_Call {
	return &MockgameRepoDep_CreateOrUpdate_Call{Call: _e.mock.On("CreateOrUpdate", ctx, game)}
}

func (_c *MockgameRepoDep_CreateOrUpdate_Call) Run(run func(ctx context.Context, game *entity.Game)) *MockgameRepoDep_CreateOrUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Game))
	})
	return _c
}

func (_c *MockgameRepoDep_CreateOrUpdate_Call) Return(_a0 error) *MockgameRepoDep_CreateOrUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockgameRepoDep_CreateOrUpdate_Call) RunAndReturn(run func(context.Context, *entity.Game) error) *MockgameRepoDep_CreateOrUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByID provides a mock function with given fields: ctx, id
func (_m *MockgameRepoDep) DeleteByID(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockgameRepoDep_DeleteByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByID'
type MockgameRepoDep_DeleteByID_Call struct {
	*mock.Call
}

// DeleteByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockgameRepoDep_Expecter) DeleteByID(ctx interface{}, id interface{}) *MockgameRepoDep_DeleteByID_Call {
	return &MockgameRepoDep_DeleteByID_Call{Call: _e.mock.On("DeleteByID", ctx, id)}
}

func (_c *MockgameRepoDep_DeleteByID_Call) Run(run func(ctx context.Context, id string)) *MockgameRepoDep_DeleteByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockgameRepoDep_DeleteByID_Call) Return(_a0 error) *MockgameRepoDep_DeleteByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockgameRepoDep_DeleteByID_Call) RunAndReturn(run func(context.Context, string) error) *MockgameRepoDep_DeleteByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockgameRepoDep) GetByID(ctx context.Context, id string) (*entity.Game, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entity.Game
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Game, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Game); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Game)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockgameRepoDep_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockgameRepoDep_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockgameRepoDep_Expecter) GetByID(ctx interface{}, id interface{}) *MockgameRepoDep_GetByID_Call {
	return &MockgameRepoDep_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockgameRepoDep_GetByID_Call) Run(run func(ctx context.Context, id string)) *MockgameRepoDep_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockgameRepoDep_GetByID_Call) Return(_a0 *entity.Game, _a1 error) *MockgameRepoDep_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockgameRepoDep_GetByID_Call) RunAndReturn(run func(context.Context, string) (*entity.Game, error)) *MockgameRepoDep_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetOpenPublicGame provides a mock function with given fields: ctx
func (_m *MockgameRepoDep) GetOpenPublicGame(ctx context.Context) (*entity.Game, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetOpenPublicGame")
	}

	var r0 *entity.Game
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*entity.Game, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *entity.Game); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Game)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockgameRepoDep_GetOpenPublicGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOpenPublicGame'
type MockgameRepoDep_GetOpenPublicGame_Call struct {
	*mock.Call
}

// GetOpenPublicGame is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockgameRepoDep_Expecter) GetOpenPublicGame(ctx interface{}) *MockgameRepoDep_GetOpenPublicGame_Call {
	return &MockgameRepoDep_GetOpenPublicGame_Call{Call: _e.mock.On("GetOpenPublicGame", ctx)}
}

func (_c *MockgameRepoDep_GetOpenPublicGame_Call) Run(run func(ctx context.Context)) *MockgameRepoDep_GetOpenPublicGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockgameRepoDep_GetOpenPublicGame_Call) Return(_a0 *entity.Game, _a1 error) *MockgameRepoDep_GetOpenPublicGame_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockgameRepoDep_GetOpenPublicGame_Call) RunAndReturn(run func(context.Context) (*entity.Game, error)) *MockgameRepoDep_GetOpenPublicGame_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockgameRepoDep creates a new instance of MockgameRepoDep. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockgameRepoDep(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockgameRepoDep {
	mock := &MockgameRepoDep{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
